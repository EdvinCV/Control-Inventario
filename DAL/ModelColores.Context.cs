//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MODELS
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ColoresEntities : DbContext
    {
        public ColoresEntities()
            : base("name=ColoresEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Categoria> Categoria { get; set; }
        public virtual DbSet<Cheque> Cheque { get; set; }
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<DetalleFactura> DetalleFactura { get; set; }
        public virtual DbSet<Efectivo> Efectivo { get; set; }
        public virtual DbSet<Factura> Factura { get; set; }
        public virtual DbSet<Marca> Marca { get; set; }
        public virtual DbSet<Medida> Medida { get; set; }
        public virtual DbSet<MetodoPago> MetodoPago { get; set; }
        public virtual DbSet<Pago> Pago { get; set; }
        public virtual DbSet<Permiso> Permiso { get; set; }
        public virtual DbSet<PermisoRol> PermisoRol { get; set; }
        public virtual DbSet<Producto> Producto { get; set; }
        public virtual DbSet<Rol> Rol { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TarjetaCredito> TarjetaCredito { get; set; }
        public virtual DbSet<TipoProducto> TipoProducto { get; set; }
        public virtual DbSet<TipoUsuario> TipoUsuario { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
    
        public virtual ObjectResult<string> sp_CrearFactura(Nullable<int> emp, Nullable<int> usuario, string xml, Nullable<int> pag)
        {
            var empParameter = emp.HasValue ?
                new ObjectParameter("emp", emp) :
                new ObjectParameter("emp", typeof(int));
    
            var usuarioParameter = usuario.HasValue ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(int));
    
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            var pagParameter = pag.HasValue ?
                new ObjectParameter("pag", pag) :
                new ObjectParameter("pag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_CrearFactura", empParameter, usuarioParameter, xmlParameter, pagParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreaPago(Nullable<int> total, string xml)
        {
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(int));
    
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreaPago", totalParameter, xmlParameter);
        }
    
        public virtual ObjectResult<string> CreaPago2(Nullable<int> total, string xml, Nullable<int> metodo)
        {
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(int));
    
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            var metodoParameter = metodo.HasValue ?
                new ObjectParameter("metodo", metodo) :
                new ObjectParameter("metodo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CreaPago2", totalParameter, xmlParameter, metodoParameter);
        }
    
        public virtual ObjectResult<string> AnularFactura(Nullable<int> codFactura)
        {
            var codFacturaParameter = codFactura.HasValue ?
                new ObjectParameter("codFactura", codFactura) :
                new ObjectParameter("codFactura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AnularFactura", codFacturaParameter);
        }
    }
}
